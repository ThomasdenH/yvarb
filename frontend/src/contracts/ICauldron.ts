/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace DataTypes {
  export type BalancesStruct = {
    art: PromiseOrValue<BigNumberish>;
    ink: PromiseOrValue<BigNumberish>;
  };

  export type BalancesStructOutput = [BigNumber, BigNumber] & {
    art: BigNumber;
    ink: BigNumber;
  };

  export type VaultStruct = {
    owner: PromiseOrValue<string>;
    seriesId: PromiseOrValue<BytesLike>;
    ilkId: PromiseOrValue<BytesLike>;
  };

  export type VaultStructOutput = [string, string, string] & {
    owner: string;
    seriesId: string;
    ilkId: string;
  };

  export type DebtStruct = {
    max: PromiseOrValue<BigNumberish>;
    min: PromiseOrValue<BigNumberish>;
    dec: PromiseOrValue<BigNumberish>;
    sum: PromiseOrValue<BigNumberish>;
  };

  export type DebtStructOutput = [BigNumber, number, number, BigNumber] & {
    max: BigNumber;
    min: number;
    dec: number;
    sum: BigNumber;
  };

  export type SeriesStruct = {
    fyToken: PromiseOrValue<string>;
    baseId: PromiseOrValue<BytesLike>;
    maturity: PromiseOrValue<BigNumberish>;
  };

  export type SeriesStructOutput = [string, string, number] & {
    fyToken: string;
    baseId: string;
    maturity: number;
  };

  export type SpotOracleStruct = {
    oracle: PromiseOrValue<string>;
    ratio: PromiseOrValue<BigNumberish>;
  };

  export type SpotOracleStructOutput = [string, number] & {
    oracle: string;
    ratio: number;
  };
}

export interface ICauldronInterface extends utils.Interface {
  functions: {
    "accrual(bytes6)": FunctionFragment;
    "assets(bytes6)": FunctionFragment;
    "balances(bytes12)": FunctionFragment;
    "build(address,bytes12,bytes6,bytes6)": FunctionFragment;
    "debt(bytes6,bytes6)": FunctionFragment;
    "debtFromBase(bytes6,uint128)": FunctionFragment;
    "debtToBase(bytes6,uint128)": FunctionFragment;
    "destroy(bytes12)": FunctionFragment;
    "give(bytes12,address)": FunctionFragment;
    "lendingOracles(bytes6)": FunctionFragment;
    "level(bytes12)": FunctionFragment;
    "mature(bytes6)": FunctionFragment;
    "pour(bytes12,int128,int128)": FunctionFragment;
    "roll(bytes12,bytes6,int128)": FunctionFragment;
    "series(bytes6)": FunctionFragment;
    "slurp(bytes12,uint128,uint128)": FunctionFragment;
    "spotOracles(bytes6,bytes6)": FunctionFragment;
    "stir(bytes12,bytes12,uint128,uint128)": FunctionFragment;
    "tweak(bytes12,bytes6,bytes6)": FunctionFragment;
    "vaults(bytes12)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accrual"
      | "assets"
      | "balances"
      | "build"
      | "debt"
      | "debtFromBase"
      | "debtToBase"
      | "destroy"
      | "give"
      | "lendingOracles"
      | "level"
      | "mature"
      | "pour"
      | "roll"
      | "series"
      | "slurp"
      | "spotOracles"
      | "stir"
      | "tweak"
      | "vaults"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accrual",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "assets",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "build",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "debt",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "debtFromBase",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "debtToBase",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "destroy",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "give",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lendingOracles",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "level",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "mature",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "pour",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "roll",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "series",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "slurp",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "spotOracles",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "stir",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tweak",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "vaults",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "accrual", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "build", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debtFromBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtToBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "give", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lendingOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "level", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mature", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pour", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "series", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slurp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "spotOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stir", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tweak", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;

  events: {};
}

export interface ICauldron extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICauldronInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accrual(
      seriesId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assets(
      assetsId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    balances(
      vault: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.BalancesStructOutput]>;

    build(
      owner: PromiseOrValue<string>,
      vaultId: PromiseOrValue<BytesLike>,
      seriesId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    debt(
      baseId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.DebtStructOutput]>;

    debtFromBase(
      seriesId: PromiseOrValue<BytesLike>,
      base: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    debtToBase(
      seriesId: PromiseOrValue<BytesLike>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    destroy(
      vault: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    give(
      vaultId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lendingOracles(
      baseId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    level(
      vaultId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mature(
      seriesId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pour(
      vaultId: PromiseOrValue<BytesLike>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roll(
      vaultId: PromiseOrValue<BytesLike>,
      seriesId: PromiseOrValue<BytesLike>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    series(
      seriesId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.SeriesStructOutput]>;

    slurp(
      vaultId: PromiseOrValue<BytesLike>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spotOracles(
      baseId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stir(
      from: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<BytesLike>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tweak(
      vaultId: PromiseOrValue<BytesLike>,
      seriesId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vaults(
      vault: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.VaultStructOutput]>;
  };

  accrual(
    seriesId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assets(
    assetsId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  balances(
    vault: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<DataTypes.BalancesStructOutput>;

  build(
    owner: PromiseOrValue<string>,
    vaultId: PromiseOrValue<BytesLike>,
    seriesId: PromiseOrValue<BytesLike>,
    ilkId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  debt(
    baseId: PromiseOrValue<BytesLike>,
    ilkId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<DataTypes.DebtStructOutput>;

  debtFromBase(
    seriesId: PromiseOrValue<BytesLike>,
    base: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  debtToBase(
    seriesId: PromiseOrValue<BytesLike>,
    art: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  destroy(
    vault: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  give(
    vaultId: PromiseOrValue<BytesLike>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lendingOracles(
    baseId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  level(
    vaultId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mature(
    seriesId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pour(
    vaultId: PromiseOrValue<BytesLike>,
    ink: PromiseOrValue<BigNumberish>,
    art: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roll(
    vaultId: PromiseOrValue<BytesLike>,
    seriesId: PromiseOrValue<BytesLike>,
    art: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  series(
    seriesId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<DataTypes.SeriesStructOutput>;

  slurp(
    vaultId: PromiseOrValue<BytesLike>,
    ink: PromiseOrValue<BigNumberish>,
    art: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spotOracles(
    baseId: PromiseOrValue<BytesLike>,
    ilkId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stir(
    from: PromiseOrValue<BytesLike>,
    to: PromiseOrValue<BytesLike>,
    ink: PromiseOrValue<BigNumberish>,
    art: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tweak(
    vaultId: PromiseOrValue<BytesLike>,
    seriesId: PromiseOrValue<BytesLike>,
    ilkId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vaults(
    vault: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<DataTypes.VaultStructOutput>;

  callStatic: {
    accrual(
      seriesId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assets(
      assetsId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    balances(
      vault: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<DataTypes.BalancesStructOutput>;

    build(
      owner: PromiseOrValue<string>,
      vaultId: PromiseOrValue<BytesLike>,
      seriesId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<DataTypes.VaultStructOutput>;

    debt(
      baseId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<DataTypes.DebtStructOutput>;

    debtFromBase(
      seriesId: PromiseOrValue<BytesLike>,
      base: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtToBase(
      seriesId: PromiseOrValue<BytesLike>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    destroy(
      vault: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    give(
      vaultId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<DataTypes.VaultStructOutput>;

    lendingOracles(
      baseId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    level(
      vaultId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mature(
      seriesId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    pour(
      vaultId: PromiseOrValue<BytesLike>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.BalancesStructOutput>;

    roll(
      vaultId: PromiseOrValue<BytesLike>,
      seriesId: PromiseOrValue<BytesLike>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.VaultStructOutput, DataTypes.BalancesStructOutput]>;

    series(
      seriesId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<DataTypes.SeriesStructOutput>;

    slurp(
      vaultId: PromiseOrValue<BytesLike>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.BalancesStructOutput>;

    spotOracles(
      baseId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<DataTypes.SpotOracleStructOutput>;

    stir(
      from: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<BytesLike>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [DataTypes.BalancesStructOutput, DataTypes.BalancesStructOutput]
    >;

    tweak(
      vaultId: PromiseOrValue<BytesLike>,
      seriesId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<DataTypes.VaultStructOutput>;

    vaults(
      vault: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<DataTypes.VaultStructOutput>;
  };

  filters: {};

  estimateGas: {
    accrual(
      seriesId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assets(
      assetsId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(
      vault: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    build(
      owner: PromiseOrValue<string>,
      vaultId: PromiseOrValue<BytesLike>,
      seriesId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    debt(
      baseId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtFromBase(
      seriesId: PromiseOrValue<BytesLike>,
      base: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    debtToBase(
      seriesId: PromiseOrValue<BytesLike>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    destroy(
      vault: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    give(
      vaultId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lendingOracles(
      baseId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    level(
      vaultId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mature(
      seriesId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pour(
      vaultId: PromiseOrValue<BytesLike>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roll(
      vaultId: PromiseOrValue<BytesLike>,
      seriesId: PromiseOrValue<BytesLike>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    series(
      seriesId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slurp(
      vaultId: PromiseOrValue<BytesLike>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spotOracles(
      baseId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stir(
      from: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<BytesLike>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tweak(
      vaultId: PromiseOrValue<BytesLike>,
      seriesId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vaults(
      vault: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accrual(
      seriesId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assets(
      assetsId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      vault: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    build(
      owner: PromiseOrValue<string>,
      vaultId: PromiseOrValue<BytesLike>,
      seriesId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    debt(
      baseId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtFromBase(
      seriesId: PromiseOrValue<BytesLike>,
      base: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    debtToBase(
      seriesId: PromiseOrValue<BytesLike>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    destroy(
      vault: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    give(
      vaultId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lendingOracles(
      baseId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    level(
      vaultId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mature(
      seriesId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pour(
      vaultId: PromiseOrValue<BytesLike>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roll(
      vaultId: PromiseOrValue<BytesLike>,
      seriesId: PromiseOrValue<BytesLike>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    series(
      seriesId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slurp(
      vaultId: PromiseOrValue<BytesLike>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spotOracles(
      baseId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stir(
      from: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<BytesLike>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tweak(
      vaultId: PromiseOrValue<BytesLike>,
      seriesId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vaults(
      vault: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
