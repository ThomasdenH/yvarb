/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace DataTypes {
  export type VaultStruct = {
    owner: PromiseOrValue<string>;
    seriesId: PromiseOrValue<BytesLike>;
    ilkId: PromiseOrValue<BytesLike>;
  };

  export type VaultStructOutput = [string, string, string] & {
    owner: string;
    seriesId: string;
    ilkId: string;
  };
}

export interface ILadleInterface extends utils.Interface {
  functions: {
    "build(bytes6,bytes6,uint8)": FunctionFragment;
    "cauldron()": FunctionFragment;
    "close(bytes12,address,int128,int128)": FunctionFragment;
    "destroy(bytes12)": FunctionFragment;
    "joins(bytes6)": FunctionFragment;
    "pools(bytes6)": FunctionFragment;
    "pour(bytes12,address,int128,int128)": FunctionFragment;
    "serve(bytes12,address,uint128,uint128,uint128)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "build"
      | "cauldron"
      | "close"
      | "destroy"
      | "joins"
      | "pools"
      | "pour"
      | "serve"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "build",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "cauldron", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "close",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "destroy",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "joins",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "pools",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "pour",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "serve",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "build", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cauldron", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pour", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "serve", data: BytesLike): Result;

  events: {};
}

export interface ILadle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILadleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    build(
      seriesId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cauldron(overrides?: CallOverrides): Promise<[string]>;

    close(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    destroy(
      vaultId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    joins(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pools(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pour(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    serve(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      ink: PromiseOrValue<BigNumberish>,
      base: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  build(
    seriesId: PromiseOrValue<BytesLike>,
    ilkId: PromiseOrValue<BytesLike>,
    salt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cauldron(overrides?: CallOverrides): Promise<string>;

  close(
    vaultId: PromiseOrValue<BytesLike>,
    to: PromiseOrValue<string>,
    ink: PromiseOrValue<BigNumberish>,
    art: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  destroy(
    vaultId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  joins(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  pools(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pour(
    vaultId: PromiseOrValue<BytesLike>,
    to: PromiseOrValue<string>,
    ink: PromiseOrValue<BigNumberish>,
    art: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  serve(
    vaultId: PromiseOrValue<BytesLike>,
    to: PromiseOrValue<string>,
    ink: PromiseOrValue<BigNumberish>,
    base: PromiseOrValue<BigNumberish>,
    max: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    build(
      seriesId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, DataTypes.VaultStructOutput] & {
        vaultId: string;
        vault: DataTypes.VaultStructOutput;
      }
    >;

    cauldron(overrides?: CallOverrides): Promise<string>;

    close(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    destroy(
      vaultId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    joins(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    pools(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    pour(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    serve(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      ink: PromiseOrValue<BigNumberish>,
      base: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    build(
      seriesId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cauldron(overrides?: CallOverrides): Promise<BigNumber>;

    close(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    destroy(
      vaultId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    joins(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pour(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    serve(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      ink: PromiseOrValue<BigNumberish>,
      base: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    build(
      seriesId: PromiseOrValue<BytesLike>,
      ilkId: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cauldron(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    close(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    destroy(
      vaultId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    joins(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pour(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      ink: PromiseOrValue<BigNumberish>,
      art: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    serve(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      ink: PromiseOrValue<BigNumberish>,
      base: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
