/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  Cauldron,
  CauldronInterface,
} from "../../YieldLeverRinkeby.sol/Cauldron";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes12",
        name: "vaultId",
        type: "bytes12",
      },
      {
        indexed: true,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "VaultGiven",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes12",
        name: "vaultId",
        type: "bytes12",
      },
    ],
    name: "balances",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "art",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "ink",
            type: "uint128",
          },
        ],
        internalType: "struct Balances",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes6",
        name: "baseId",
        type: "bytes6",
      },
      {
        internalType: "bytes6",
        name: "ilkId",
        type: "bytes6",
      },
    ],
    name: "debt",
    outputs: [
      {
        components: [
          {
            internalType: "uint96",
            name: "max",
            type: "uint96",
          },
          {
            internalType: "uint24",
            name: "min",
            type: "uint24",
          },
          {
            internalType: "uint8",
            name: "dec",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "sum",
            type: "uint128",
          },
        ],
        internalType: "struct Debt",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes6",
        name: "seriesId",
        type: "bytes6",
      },
      {
        internalType: "uint128",
        name: "art",
        type: "uint128",
      },
    ],
    name: "debtToBase",
    outputs: [
      {
        internalType: "uint128",
        name: "base",
        type: "uint128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes12",
        name: "vaultId",
        type: "bytes12",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "give",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "bytes6",
            name: "seriesId",
            type: "bytes6",
          },
          {
            internalType: "bytes6",
            name: "ilkId",
            type: "bytes6",
          },
        ],
        internalType: "struct Vault",
        name: "vault",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes6",
        name: "seriesId",
        type: "bytes6",
      },
    ],
    name: "series",
    outputs: [
      {
        components: [
          {
            internalType: "contract IFYToken",
            name: "fyToken",
            type: "address",
          },
          {
            internalType: "bytes6",
            name: "baseId",
            type: "bytes6",
          },
          {
            internalType: "uint32",
            name: "maturity",
            type: "uint32",
          },
        ],
        internalType: "struct Series",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes6",
        name: "baseId",
        type: "bytes6",
      },
      {
        internalType: "bytes6",
        name: "ilkId",
        type: "bytes6",
      },
    ],
    name: "spotOracles",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "oracle",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "ratio",
            type: "uint32",
          },
        ],
        internalType: "struct SpotOracle",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes12",
        name: "vaultId",
        type: "bytes12",
      },
    ],
    name: "vaults",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "bytes6",
            name: "seriesId",
            type: "bytes6",
          },
          {
            internalType: "bytes6",
            name: "ilkId",
            type: "bytes6",
          },
        ],
        internalType: "struct Vault",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class Cauldron__factory {
  static readonly abi = _abi;
  static createInterface(): CauldronInterface {
    return new utils.Interface(_abi) as CauldronInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Cauldron {
    return new Contract(address, _abi, signerOrProvider) as Cauldron;
  }
}
